@import "variables.scss";

$profileImgSize: 200px;
$highlightActiveMenuItems: false;

$border-radius-small: 3px;
$border-radius: 6px;
$border-radius-large: 10px;

$input-bg: $gray-700;
$input-color: white;
$input-color-placeholder: #999;

$mobileHeaderBarHeight: 4.5rem;

$baseBgColor: black; // rgb(32, 34, 36);
$body-bg: black; // darken($baseBgColor, 7%);
$body-color: white;
$font-size-base: 1rem !default;

$disabled-body-color: gray; //darken($body-color, 90%);

// This gives us awesome large checkboxes and radio buttons!!
$custom-control-indicator-size: 1.75rem;

$form-select-indicator-color: lightGray;

@import "../node_modules/bootstrap/scss/bootstrap";

@import "bootswatch.scss";

// Removed custom fonts, because I need emojis to look good
$fontFamily: 'QuantaCustomFont', 'Roboto', 'Verdana', 'Helvetica', 'Arial', 'sans-serif';

// This does work (border around focused edit fields) but we don't need it.
/*
.form-control:focus {
    border-color: green;
}
*/

@import "click-effect.scss";

* {
    outline: none;
}

$menuItemHoverBackgroundColor: $primary;
$nodeBorderBottomColor: $gray-700;
$dlgBorderColor: var(--bs-green);
$dlgBorderWidth: 2px;
$createdByMeBackgroundColor: green;
$createdByMeTextColor: white;
$createdByAnotherBackgroundColor: $gray-700;
$createdByAnotherTextColor: white;
$listBackgroundColor: lightGray;
$smallGap: 12px;
$mediumGap: 18px;
$bigGap: 24px;
$tinyGap: 8px;
$microGap: 4px;
$smallerFont: 80%;
$lightenRowFactor: 5;
$fatBorderSize: 8px;
$mediumBorderSize: 6px;
$highlightBorderSize: 8px;
$smallBorderSize: 3px;
$mobileHeaderHeight: 3.5rem;

@font-face {
    font-family: "QuantaCustomFont";
    src: url('../fonts/Roboto-Light.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
}

@import 'scrollbar.scss';
@import 'nav.scss';
@import 'menu.scss';
@import 'checkbox.scss';
@import 'list.scss';
@import 'button.scss';
@import 'dropzone.scss';
@import 'breadcrumbs.scss';
@import 'media-queries.scss';
@import 'feed.scss';
@import 'rss.scss';
@import 'profile.scss';
@import 'openGraph.scss';
@import 'nodeItem.scss';
@import 'tabs.scss';
@import 'dialog.scss';
@import 'icon.scss';
@import 'image.scss';
@import 'layout.scss';
@import 'tts.scss';
@import 'edit.scss';
@import 'text.scss';

// todo-1: Eventually we need to have all SCSS in as targeted/specific a location as possible by 
// makeing an SCSS file like this one, for each component that has any of it's own completely private CSS
@import '../ts/comp/App.scss';

body {
    font-family: "QuantaCustomFont" !important;
}

#app {
    overflow: hidden;
    width: 100%;
    height: 100%;
}

.mfsFileView {
    margin: $smallGap;
}

.helpPanel {
    margin-top: 10px;
    margin-bottom: 10px;
    border: 1px solid gray;
    padding-top: $smallGap;
    padding-left: $smallGap;
    padding-right: $smallGap;
}

.fullScreenToolbar {
    z-index: 2147483501;
    position: fixed;
    top: 0;
    right: 0;
    margin: 10px;
}

.fullScreenViewer {
    overflow: auto;
    width: 100%;
    height: 100%;
}

.calcOutputArea {
    font-family: Courier New, Courier, Lucida Sans Typewriter, Lucida Typewriter, monospace;
    font-size: 120%;
    margin-left: $smallGap;
    max-height: 600px;
    overflow-y: auto;
    border: 2px solid olivedrab;
    margin-top: 12px;
    padding: 8px;
}

.statsWord {
    padding-left: 8px;
    padding-right: 8px;
    margin-right: 6px;
    display: inline-block;
    cursor: pointer;
    font-size: x-large;
    border-radius: $border-radius-small;
}

.statsWord:hover {
    background-color: $primary;
}

.statsWordMobile {
    @extend .statsWord;
    padding: 8px;
}

.wordStatsArea {
    border: 1px solid $nodeBorderBottomColor;
    padding: $smallGap;
    margin-bottom: $smallGap;
    max-height: 200px;
    overflow-y: auto;
    background-color: $baseBgColor;
}

.trendingWordStatsArea {
    padding: $smallGap;
    margin-bottom: $smallGap;
    border-radius: $border-radius;
    background-color: $baseBgColor;
    padding: 12px;
}

.d3Graph {}

.popupNodeLinks {
    margin-top: $smallGap
}

.graphPopup {
    background-color: $modal-content-bg;
    border: 2px solid gray;
    max-width: 30%;
    margin: $smallGap !important;
    padding: $smallGap !important;
    position: absolute;
    left: 0;
    top: 0;
}

.d3PieChart {
    width: 250px;
    height: 250px;
}

/* Need a way that we can set font sizes, on anchors but this actually messes up button styling because my buttons
are sometimes using anchorz inside them like the main landing page button which enlarges when clicked if these font size
alterations exist */
a:visited {
    color: #00bc8c !important;
    font-weight: bold;
    cursor: pointer;
}

a:active {
    color: #00bc8c !important;
    font-weight: bold;
    cursor: pointer;
}

a {
    color: #00bc8c !important;
    font-weight: bold;
    cursor: pointer;
}

.mediaStreamInputOption {
    width: 30rem;
}

.footerLink {
    margin-right: $smallGap;
    cursor: pointer;
}

.navbar {
    margin-bottom: 0;
}

.smallLogoButton {
    border: 1px solid gray;
    cursor: pointer;
    padding: 5px;
    background-color: black;
}

.highlightBorder {
    border: 1px solid green;
}

.binary-link {
    margin-left: $smallGap;
    margin-bottom: $smallGap;
}

.rhsMenu {
    width: 60%;
    padding-left: 0;
}

.rhsMenuMobile {
    width: 85%;
    padding-left: 0;
}

.lhsHeaderPanel {
    margin-bottom: $smallGap;
}

.friendLhs {
    width: 25%;
}

.friendRhs {
    width: 75%;
}

/* This is how the search terms get highlighted by wrapping them like this in 
the markdown **_term_** */
strong em {
    font-style: normal;
    font-weight: bold;
    background-color: green;
}

em {
    font-size: 110%;
}

strong {
    font-size: 110%;
}

.formGrpBorder {
    border: 1px solid $gray-600;
}

.editPropsCont {
    background-color: #17202A;
    border: 1px solid $gray-600;
    margin-bottom: $smallGap;
}

.editPropsTable {
    padding-left: $smallGap;
    width: 100%;
}

.splitNodeRadioButtonGroup {
    padding: $smallGap;
    margin-bottom: $smallGap;
}

.histPanelExpanded {
    margin-top: 35px;
    margin-left: $smallGap;
}

.histPanelCollapsed {
    margin-top: 35px;
    margin-left: $smallGap;
}

.propsPanelExpanded {}

.propsPanelCollapsed {}

.progressSpinner {
    width: 5rem;
    margin: 0 auto;
}

.extraPagingComps {
    margin: 0px 0px 4px 0;
    display: inline-block;
}

.line {
    width: 100%;
    border-bottom: 2px solid gray;
}

.scrollingPropsTable {
    width: 100%;
    overflow-x: auto;
    margin-left: $smallGap;
    margin-bottom: $smallGap;
}

/* I was getting a crazy render flicker where the browser was apparently toggling scrollbar off and on 10 times per second
it looked like and this wild ass guess at using 95% instead of 100% here as a fix solved the problem. 
Will come back later and study this more. todo-3 */
.videoContainer {
    width: 98%;
}

.videoPlayerElement {
    display: block;
    width: 75%;
    border: 2px solid gray;
    margin: 0 auto;
}

.mainContainer {
    padding: 0;
    overflow: hidden;
}

.mainContainerMobile {
    padding: 0;
    font-size: 1.2rem;
}

.rightNavPanel {
    padding-top: 15px;
    padding-left: $smallGap;
    height: 100%;
    overflow-y: scroll;
    padding-bottom: 40px;
}

.leftNavPanel {
    height: 100%;
    overflow-y: scroll;
    padding-top: 12px;
    padding-bottom: 20px;
}

.rightNavPanelInner {
    min-width: 15rem;
    margin-left: 10px;
}

.rightNavPanelInnerMobile {
    min-width: 15rem;
}

.scrollY {
    overflow-y: auto;
    overflow-x: hidden;
}

.scrollBorder {
    border: 1px solid gray;
}

.selectKeyTypeDropDown {
    margin-bottom: 12px;
    max-width: 20rem;
}

.listGroupMenuItem {
    background-color: transparent;
    padding: 5px 5px 4px 10px;
}

.listGroupTransparent {
    background-color: transparent;
    padding: 5px 5px 4px 10px;
}

.audioPlayer {
    width: 100%;
    padding: 0;
    margin-top: 0;
    margin-left: 0;
    margin-right: 0;
    margin-bottom: 10px;
}

.delAttachmentButton {
    margin-top: $tinyGap;
    margin-right: $tinyGap;
}

.delAttCheckbox {
    margin-right: 0px !important;
}

.attachmentLinkGroup {
    margin-left: 20px;
}

.selectOption {
    font-size: 120%;
}

.formSelect {
    border: 1px solid gray !important;
    padding: 5px 5px 5px 10px;
}

.tagIndent {
    margin-left: 2rem;
}

.rowTypeName {
    vertical-align: middle;
    margin-left: 6px;
}

.systemFileActionLink {
    cursor: pointer;
    margin-right: 16px;
    border-bottom: 1px dotted gray;
}

.systemFile {
    font-family: Courier New, Courier, Roboto, Tahoma, Verdana, Arial;
    cursor: pointer;
    padding-bottom: 5px;
}

.searchResultsPanel {}

.timelinePanel {}

.parentNodeContentStyle {
    padding-right: 8px;
    padding-top: 8px;
    margin-bottom: 8px;
    margin-top: 8px;
}

.validationError {
    color: #E74C3C;
    margin-bottom: 0;
}

.validationErrorBorder {
    border: 2px solid #E74C3C;
}

.editorTagsSection {
    margin-top: $smallGap;
}

.tagsFlexContainer {
    display: flex;
    flex-wrap: wrap;
}

.headerInfoDivExpanded {
    display: block;
    width: 100%;
}

.headerInfoDivCollapsed {
    display: inline-block;
}

.headerInfoButton {
    background-color: transparent;
    margin-right: $smallGap;
    margin-bottom: $smallGap;
}

/* This positioning puts the plus buttion right outside the row to the right between rows
   so it's intuitive where the insert goes 
   
   NOTE: We could've also used a 'translatle()' css function to do this.
   */
.plusButtonFloatRight {
    position: absolute;
    top: -1.3rem;
    right: -3rem;
}

@keyframes fadeToHidden {

    // from {
    //     opacity: 1;
    // }
    to {
        opacity: 0;
    }
}

.compHidden {
    visibility: hidden;

    // animating the hiding part doesn't work well, because the effect gets interrupted by other parts of 
    // our animation flow, so we have to set to hidden instantly without animation.
    // animation-name: fadeToHidden;
    // animation-duration: .2s;
    // opacity: 0;

    margin-bottom: 20px;
}

/* Note: visibility is not allowed to be animated. This is a rule of CSS engines, not our own limitation. Also we don't set the 
'from' value becasue if it's already visibible 'opacity=1' we don't want to cause a screen flicker by setting invisible first for no reason.
*/
@keyframes fadeToVisible {
    from {
        opacity: hidden;
    }

    to {
        visibility: visible;
    }
}

.compVisible {
    visibility: visible;

    // this was an experiment, an may not even have been desirable
    // so for now we just set to visible instantly which is better
    // performance anyway, and may not be any less eye-strain
    // than I had thought this animation might solve.
    // animation-name: fadeToVisible;
    // animation-duration: 1s; <-------this didn't work. Comes back to visible instantly (no amination).
    margin-bottom: 20px;
}

.systemNodeContent {
    border: 1px solid gray;
    padding: $tinyGap;
    background-color: $secondary;
    margin: $tinyGap $smallGap $smallGap $smallGap;
    width: 97%;
}

// todo-1: once I'm certain about it I can remove these
.contentNarrow {}

.contentMedium {}

.contentWide {}

.mousePointer {
    cursor: pointer;
}

.propsList {}

.propsListItemCheckBox {
    vertical-align: middle;
    margin-left: $microGap;
    margin-right: 0 !important;
}

.propertyTable {}

.propTableRow {
    width: 100%;
}

.propTableNameCol {
    width: 25%;
    background-color: darkolivegreen;
}

.propTableValCol {
    width: 70%;
}

.files-table {
    width: 100%;
    margin-top: $smallGap;
}

.filesTableRow {
    width: 100%;
}

.filesTableTypeCol {
    width: 5%;
}

.filesTableSizeCol {
    width: 15%;
}

.filesTableDelCol {
    width: 5%;
}

.filesTableNameCol {
    cursor: pointer;
    width: 75%;
}

.resultsNode {
    // why relative here ? todo-1
    position: relative;
    cursor: pointer;
}

.widthSizerPanel {
    margin-top: 8px;
    display: inline-block;
    background: $body-bg;
}

.main {
    background-color: #eee;
}

.timeRemainingEditField {
    margin-left: 5px;
}

.threadNodeDivider {
    width: 100%;
}

.threadFeedItemBase {
    margin-top: 8px;
    padding-top: 10px;
    border-radius: $border-radius;
}

.threadFeedItem {
    @extend .threadFeedItemBase;
    border: 1px solid $nodeBorderBottomColor;
}

.threadFeedItemTarget {
    @extend .threadFeedItemBase;
    border: 4px solid $nodeBorderBottomColor;
}

.threadFeedItemHighlight {
    @extend .threadFeedItemBase;
    border: 1px solid olivedrab;
}

.threadFeedItemHighlightTarget {
    @extend .threadFeedItemBase;
    border: 4px solid olivedrab;
}

.threadFeedSubItem {
    padding-top: 10px;

    &:not(:last-child) {
        border-bottom: 1px solid $nodeBorderBottomColor;
    }

    &:last-child {
        margin-bottom: 16px;
    }

    border-left: 1px solid $nodeBorderBottomColor;
    margin-left: 4rem;
}

.userFeedItem {
    padding-top: 10px;
    border-top: 1px solid $nodeBorderBottomColor;
    padding-bottom: $tinyGap;
}

.userFeedItemHighlight {
    padding-top: 10px;
    border: 1px solid olivedrab;
    padding-bottom: $tinyGap;
}

.userFeedParent {
    border: 2px solid $nodeBorderBottomColor;
}

.searchDlgOrderBy {
    width: 12rem;
    margin-left: $bigGap;
}

.searchDlgSearchRoot {
    width: 12rem;
}

.layoutSelection {
    max-width: 14rem;
    margin-right: 1rem;
}

.selectLabel {
    margin-right: 6px;
}

.widthDropDown {
    display: inline-block;
    margin-right: $smallGap;
    margin-left: $smallGap;
    width: 6rem;
}

.positionDropDown {
    display: inline-block;
    margin-right: $smallGap;
    width: 7rem;
}

.friendSearchField {
    width: 50%;
}

.friendSearchButtonDiv {
    padding-left: $tinyGap;
    width: 10%;
}

.friendsTagPickerOnEditor {
    width: 40%;
    padding-left: $bigGap;
}

.friendsTagPickerOnView {
    width: 15em;
    padding-right: $smallGap;
    display: inline-block;
}

.binaryEditorSection {
    border: 1px solid gray;
    margin-bottom: $smallGap;
    margin-top: $tinyGap;
    padding: $smallGap;
    background-color: #17202A;
}

.binaryEditorItem {
    padding-bottom: $microGap;
}

.binaryEditorItem {
    &:not(:last-child) {
        border-bottom: 1px solid $gray-700;
        margin-bottom: $tinyGap;
    }
}

.friendName {
    font-size: 1rem;
    font-weight: bold;
}

.sharingDisplayName {
    display: inline-block;
    padding: $smallGap;
    cursor: pointer;
}

.propNameInList {
    display: inline-block;
    margin: $tinyGap;
}

.propRangesInList {
    display: inline-block;
    margin: $tinyGap;
}

.mobileRHSPanel {
    font-size: 140%;
}

.ipfsPinnedCheckbox {
    margin-left: 24px;
}

.durationTypeInput {
    max-width: 5rem;
    margin-left: $smallGap;
}

//We use the default player except we have our own big play and pause buttons.

audio::-webkit-media-controls-mute-button {
    display: none !important;
}

audio::-webkit-media-controls-play-button {
    display: none !important;
}

// NOTE: The way to center an element inside another element is user "text-align: center" on the parent 
// element and then "display: inline-block" on the element to be centered in the parent.
.playerButtonsContainer {
    text-align: center;
    margin-top: 20px;
}

.playerButton {
    cursor: pointer;
    display: inline-block;
    padding: 12px;
    border: 6px solid lightGray;
}

// WARNING: Don't put ANY margin at top, becasue that makes the stickyness not perfect.
.headingBar {
    padding-top: 8px;
    margin-bottom: 8px;
    border-bottom: $highlightBorderSize solid $nodeBorderBottomColor;
    background-color: $body-bg;
    position: sticky;
    top: 0;
    z-index: 100;
    min-height: 4em;
}

.headingBarMobile {
    padding-top: 8px;
    margin-bottom: 8px;
    border-bottom: $highlightBorderSize solid $nodeBorderBottomColor;
    background-color: $body-bg;
    min-height: 4em;
}

.rowHeaderSharingNames {
    margin-right: $smallGap;
}

.tableRow {
    display: table-row;
}

.displayTable {
    display: table;
    border-spacing: 10px;
}

.clickable {
    cursor: pointer;
}

.userInfo {
    cursor: pointer;
    width: 100%;
    margin-top: $smallGap;
    margin-bottom: $smallGap;
}

.stickyNote {
    margin-top: 6px;
    color: darkkhaki;
}

.apObjLinksContainer {
    margin-bottom: $smallGap;
    margin-left: $smallGap;
}

.apUrlLink {
    margin-bottom: $microGap;
}

.rhsLink {
    margin-top: 25px;
    margin-right: 55px;
    cursor: pointer;
}

.floatRightHeaderDiv {
    margin-left: 10px;
    margin-top: 2px;
}

.historyPanelTitle {
    font-weight: bold;
    margin-bottom: $smallGap;
    display: inline-block;
}

.nodeHistoryPanel {
    margin-left: 16px;
    padding-top: 4px;
    border-top: 1px dotted gray;
}

.lockFont {
    font-size: 90%;
}

.dragSource {
    background: repeating-linear-gradient(-45deg,
            orange,
            orange 2px,
            transparent 2px,
            transparent 14px);
}

.dragTarget {
    background: repeating-linear-gradient(-45deg,
            green,
            green 2px,
            transparent 2px,
            transparent 14px);
}

.nodeHistoryItem {
    cursor: pointer;
    margin: 0 $smallGap $microGap $smallGap;
}

.ipsmFeedItem {
    font-family: 'Courier New', Courier, monospace;
    border-bottom: 1px solid gray;
}

.dateField {
    font-family: "monospace";
}

.timeField {
    font-family: "monospace";
}

.dragTargetDlgSection {
    margin-top: $smallGap;
    border: 1px solid gray;
    padding: $smallGap;
}

.tagsPrompt {
    width: 4em;
    margin-right: $smallGap;
    text-align: right;
}

.linksPrompt {
    width: 4em;
    margin-right: $smallGap;
    text-align: right;
}

.nodeLink {
    display: inline-block;
    background-color: $primary;
    border: 1px solid gray;
    padding: 0 6px 0 6px;
    margin-right: 8px;
    margin-bottom: 8px;
    cursor: pointer;
    white-space: nowrap;
}

.linksPanel {
    margin-left: $smallGap;
}

.linksPanelInEditor {
    display: flex;
    flex-wrap: wrap;
}

.lastModifiedTime {
    margin-right: $tinyGap;
}

.boost-header {
    cursor: pointer;
    margin-left: $smallGap;
}

.contentWidthSelection {
    margin-bottom: 12px;
    max-width: 20rem;
}

.accountSettingsCol {
    width: 50%;
}

.accountSettingsPanel {
    margin-left: $smallGap;
    width: 100%;
}

.accountSettingsSection {
    width: 100%;
}

.settingsLink {
    cursor: pointer;
    font-size: 120%;
    margin-left: $bigGap;
    margin-bottom: $smallGap;
}

.settingsSectionTitle {
    margin-top: 24px;
    margin-bottom: 8px;
    padding: 6px 6px 6px 12px;
    border: 1px solid $nodeBorderBottomColor;
    text-align: center;
    margin-right: $bigGap;
}

.flexPropsEditPanel {
    display: flex;
    flex-wrap: wrap;
}

.flexPropsDisplayPanel {
    display: flex;
    flex-wrap: wrap;
}

.fieldDisplayPanel {
    margin-left: 16px;
    margin-bottom: $smallGap;
    border-top: 1px dotted $nodeBorderBottomColor;
    border-right: 1px dotted $nodeBorderBottomColor;
}

.fieldDisplayLabel {
    margin-left: $smallGap;
    margin-top: $tinyGap;
}

.fieldDisplayVal {
    font-family: Courier New, Courier, Lucida Sans Typewriter, Lucida Typewriter, monospace;
    font-size: 115%;
    margin-left: $smallGap;
    color: green;
}

.fieldDisplayCell {
    border-left: 4px solid $nodeBorderBottomColor;
    border-bottom: 1px dotted $nodeBorderBottomColor;
}

.contentEditor {
    width: 100%;
}

.editTypesPanelHeader {
    margin: $tinyGap 0 0 $smallGap;
}