@import "variables.scss";

$profileImgSize: 200px;
$highlightActiveMenuItems: false;

$border-radius-small: 3px;
$border-radius: 6px;
$border-radius-large: 10px;

$input-bg: $gray-700;
$input-color: white;
$input-color-placeholder: #999;

$mobileHeaderBarHeight: 4.5rem;

$baseBgColor: black; // rgb(32, 34, 36);
$body-bg: black; // darken($baseBgColor, 7%);
$body-color: white;
$font-size-base: 1rem !default;

$disabled-body-color: gray; //darken($body-color, 90%);

// This gives us awesome large checkboxes and radio buttons!!
$custom-control-indicator-size: 1.75rem;

$form-select-indicator-color: lightGray;

@import "../node_modules/bootstrap/scss/bootstrap";

@import "bootswatch.scss";

// Removed custom fonts, because I need emojis to look good
$fontFamily: 'QuantaCustomFont', 'Roboto', 'Verdana', 'Helvetica', 'Arial', 'sans-serif';

// This does work (border around focused edit fields) but we don't need it.
/*
.form-control:focus {
    border-color: green;
}
*/

@import "click-effect.scss";

* {
    outline: none;
}

$menuItemHoverBackgroundColor: $primary;
$nodeBorderBottomColor: $gray-700;
$dlgBorderColor: var(--bs-green);
$dlgBorderWidth: 2px;
$createdByMeBackgroundColor: green;
$createdByMeTextColor: white;
$createdByAnotherBackgroundColor: $gray-700;
$createdByAnotherTextColor: white;
$listBackgroundColor: lightGray;
$smallGap: 12px;
$mediumGap: 18px;
$bigGap: 24px;
$tinyGap: 8px;
$microGap: 4px;
$smallerFont: 80%;
$lightenRowFactor: 5;
$fatBorderSize: 8px;
$mediumBorderSize: 6px;
$highlightBorderSize: 8px;
$smallBorderSize: 3px;
$mobileHeaderHeight: 3.5rem;

@font-face {
    font-family: "QuantaCustomFont";
    src: url('../fonts/Roboto-Light.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
}

@import 'scrollbar.scss';
@import 'nav.scss';
@import 'menu.scss';
@import 'checkbox.scss';
@import 'list.scss';
@import 'button.scss';
@import 'dropzone.scss';
@import 'breadcrumbs.scss';
@import 'media-queries.scss';
@import 'feed.scss';
@import 'rss.scss';
@import 'profile.scss';
@import 'openGraph.scss';
@import 'nodeItem.scss';

body {
    font-family: "QuantaCustomFont" !important;
}

#app {
    overflow: hidden;
    width: 100%;
    height: 100%;
}

.mention {
    margin-right: 3px;
    margin-left: 3px;
}

.alert {
    // these sizes are half the default for bootstrap
    padding: .5rem;
    margin-bottom: .5rem;
}

.mfsFileView {
    margin: $smallGap;
}

.textTypeContent {
    margin: 12px 0px 12px 12px;
    padding: 8px;
    border: 1px solid $nodeBorderBottomColor;
    background-color: #17202A;
}

.preWordWrap {
    // overflow-x: auto; //<--- highly upvoted stack overflow didn't have this.
    white-space: pre-wrap;
    white-space: -moz-pre-wrap;
    white-space: -pre-wrap;
    white-space: -o-pre-wrap;
    word-wrap: break-word;
}

.mkCont table,
th,
td {
    border: 1px solid $nodeBorderBottomColor;
    border-collapse: collapse;
}

.mkCont th,
td {
    padding: $tinyGap;
}

.serverInfoText {
    width: 100%;
    overflow: auto;
}

.mobileHeaderBar {
    padding: 10px;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    background-color: $nodeBorderBottomColor;
    border-bottom: 1px solid gray;
    height: $mobileHeaderBarHeight;
}

.fileNameField {
    width: 12em;
    min-width: 3em;
}

.displayNameTextField {
    max-width: 40rem;
}

.helpPanel {
    margin-top: 10px;
    margin-bottom: 10px;
    border: 1px solid gray;
    padding-top: $smallGap;
    padding-left: $smallGap;
    padding-right: $smallGap;
}

.mainAppRow {
    margin-left: 0px !important;
    margin-right: 0px !important;
    height: 100vh;
    overflow: hidden;
}

.signupLinkText {
    cursor: pointer;
    margin-bottom: 16px;
    margin-right: 16px;
}

.signupLinkTextMobile {
    display: inline-block;
    margin-top: 16px;
    cursor: pointer;
}

.fullScreenToolbar {
    z-index: 2147483501;
    position: fixed;
    top: 0;
    right: 0;
    margin: 10px;
}

.fullScreenViewer {
    overflow: auto;
    width: 100%;
    height: 100%;
}

.calcOutputArea {
    font-family: Courier New, Courier, Lucida Sans Typewriter, Lucida Typewriter, monospace;
    font-size: 120%;
    margin-left: $smallGap;
    max-height: 600px;
    overflow-y: auto;
    border: 2px solid olivedrab;
    margin-top: 12px;
    padding: 8px;
}

.statsWord {
    padding-left: 8px;
    padding-right: 8px;
    margin-right: 6px;
    display: inline-block;
    cursor: pointer;
    font-size: x-large;
    border-radius: $border-radius-small;
}

.statsWord:hover {
    background-color: $primary;
}

.statsWordMobile {
    @extend .statsWord;
    padding: 8px;
}

.wordStatsArea {
    border: 1px solid $nodeBorderBottomColor;
    padding: $smallGap;
    margin-bottom: $smallGap;
    max-height: 200px;
    overflow-y: auto;
    background-color: $baseBgColor;
}

.trendingWordStatsArea {
    padding: $smallGap;
    margin-bottom: $smallGap;
    border-radius: $border-radius;
    background-color: $baseBgColor;
    padding: 12px;
}

.speechTxtArea {
    border: 2px solid $nodeBorderBottomColor;
    margin-bottom: 24px;
    margin-top: $smallGap;
    border-radius: $border-radius;
    background-color: $baseBgColor;
    padding: 16px;
}

.stickySpeechButtons {
    position: sticky;
    top: 0;
    right: 0;
    z-index: 15000001;
    background: $primary;
    border: 2px solid $nodeBorderBottomColor;
    padding: 6px 12px 6px 12px;
}

.speechAreaTitle {
    margin-bottom: 10px;
    padding: 6px 6px 6px 12px;
    border: 1px solid $nodeBorderBottomColor;
}

.ttsPara {
    margin-top: 16px;
}

.ttsSpan {
    font-size: large;
    padding-top: 4px;
    padding-bottom: 4px;
    cursor: pointer;
}

.ttsQuote {
    color: var(--bs-green);
}

.ttsHlt {
    background: blue;
    color: yellow;
}

.selectVoiceDropDown {
    margin-bottom: 12px;
    max-width: 30rem;
    margin-right: $smallGap;
}

.rateChooserDropDown {
    margin-bottom: 12px;
    width: 7rem;
    margin-right: $smallGap;
}

.d3Graph {
}

.popupNodeLinks {
    margin-top: $smallGap
}

.graphPopup {
    background-color: $modal-content-bg;
    border: 2px solid gray;
    max-width: 30%;
    margin: $smallGap !important;
    padding: $smallGap !important;
    position: absolute;
    left: 0;
    top: 0;
}

.d3PieChart {
    width: 250px;
    height: 250px;
}

// HTML comming from Mastodon includes this so tolerate if for now.
.invisible {
    display: none;
    visibility: hidden !important;
}

// for some reason, 'visibility: hidden' isn't working, but 'opacity' does work. I'll just leave both, it works.
.compHidden {
    opacity: 0;
}

.visible {
    display: inline-block;
    visibility: visible !important;
}

/* Need a way that we can set font sizes, on anchors but this actually messes up button styling because my buttons
are sometimes using anchorz inside them like the main landing page button which enlarges when clicked if these font size
alterations exist */
a:visited {
    color: #00bc8c !important;
    font-weight: bold;
    cursor: pointer;
}

a:active {
    color: #00bc8c !important;
    font-weight: bold;
    cursor: pointer;
}

a {
    color: #00bc8c !important;
    font-weight: bold;
    cursor: pointer;
}

.mediaStreamInputOption {
    width: 30rem;
}

.footerLink {
    margin-right: $smallGap;
    cursor: pointer;
}

.navbar {
    margin-bottom: 0;
}

.smallLogoButton {
    border: 1px solid gray;
    cursor: pointer;
    padding: 5px;
    background-color: black;
}

.leftNavLogoImg {
    border: 1px solid gray;
    cursor: pointer;
    padding: 5px;
    border-radius: $border-radius;
}

.logoText {
    cursor: pointer;
    font-size: 1.5rem;
    font-weight: 600;
    margin-left: 10px;
    margin-right: 15px;
    vertical-align: top;
    color: var(--bs-green);
}

.newMessagesNote {
    cursor: pointer;
    padding: 2px 6px 2px 6px;
    margin-right: $smallGap;
    color: var(--bs-green);
    border: 2px solid var(--bs-green);
}

.highlightBorder {
    border: 1px solid green;
}

.binary-link {
    margin-left: $smallGap;
    margin-bottom: $smallGap;
}

.normalText {
    font-weight: normal;
}

.avatarImage {
    max-width: 48px;
    max-height: 80px;
    cursor: pointer;
    border: 1px solid gray;
    vertical-align: top;
}

.resultsContentHeading {
    font-size: 120%;
    padding: 10px;
    margin-bottom: 10px;
    margin-top: 10px;
    border: 1px solid gray;
}

.logViewTitle {
    margin-bottom: 10px;
}

.trendingSectionTitle {
    margin-bottom: 10px;
    padding: 6px 6px 6px 12px;
    border: 1px solid $nodeBorderBottomColor;
    text-align: center;
}

.headerImageRHS {
    cursor: pointer;
    width: 100%;
    object-fit: cover;
    border: 2px solid $nodeBorderBottomColor;
    min-height: 60px;
    max-height: 200px;
}

.rhsMenu {
    width: 60%;
    padding-left: 0;
}

.rhsMenuMobile {
    width: 85%;
    padding-left: 0;
}

.userName {
    font-weight: bold;
}

.rhsUserName {
}

.lhsHeaderPanel {
    margin-bottom: $smallGap;
}

.friendLhs {
    width: 25%;
}

.friendRhs {
    width: 75%;
}

/* it's a bit ugly that we have to style the icon differently based on if it's on a list view or the main tree */
.listFriendImage {
    max-width: 70px;
    cursor: pointer;
    border: 2px solid $nodeBorderBottomColor;
}

/* This is how the search terms get highlighted by wrapping them like this in 
the markdown **_term_** */
strong em {
    font-style: normal;
    font-weight: bold;
    background-color: green;
}

em {
    font-size: 110%;
}

strong {
    font-size: 110%;
}

.formGrpBorder {
    border: 1px solid $gray-600;
}

.editPropsCont {
    background-color: #17202A;
    border: 1px solid $gray-600;
    margin-bottom: $smallGap;
}

.editPropsTable {
    padding-left: $smallGap;
    width: 100%;
}

.fixedFont {
    font-family: 'Courier New', Courier, monospace;
}

.splitNodeRadioButtonGroup {
    padding: $smallGap;
    margin-bottom: $smallGap;
}

.histPanelExpanded {
    margin-top: 35px;
    margin-left: $smallGap;
}

.histPanelCollapsed {
    margin-top: 35px;
    margin-left: $smallGap;
}

.propsPanelExpanded {
}

.propsPanelCollapsed {
}

.collapsePanelLink {
    margin: $smallGap;
    cursor: pointer;
}

.dlgContainer {
    display: none;
}

.progressSpinner {
    width: 5rem;
    margin: 0 auto;
}

.overlay {
    z-index: 2147483500;
    background-color: rgba(1, 1, 1, 0.1);
    bottom: 0;
    left: 0;
    position: fixed;
    right: 0;
    top: 0;
    cursor: progress;
    display: none;
}

.extraPagingComps {
    margin: 0px 0px 4px 0;
    display: inline-block;
}

.signatureIcon {
    color: darkkhaki;
    margin-right: $smallGap;
}

.lockIcon {
    color: darkkhaki;
    margin-right: $smallGap;
}

.bigSignatureIcon {
    color: darkkhaki;
}

.bigLockIcon {
    color: darkkhaki;
    margin-right: $smallGap;
}

.appModalTitleNormal {
    font-size: 130%;
    border-top-left-radius: $border-radius;
    border-top-right-radius: $border-radius;
}

.appModalTitlePopup {
    font-size: 130%;
    border-top-left-radius: $border-radius;
    border-top-right-radius: $border-radius;
    background-color: $primary;
}

.dlgTitleTopmost {
    border-top: $dlgBorderWidth solid $dlgBorderColor;
    border-left: $dlgBorderWidth solid $dlgBorderColor;
    border-right: $dlgBorderWidth solid $dlgBorderColor;
}

.dlgTitleNormal {
    border-top: 2px solid gray;
    border-left: 2px solid gray;
    border-right: 2px solid gray;
}

.dlgModalTitleCloseIcon {
    cursor: pointer;
    margin-right: 8px;
}

.appModalBackdrop {
    position: fixed;
    z-index: 16000000;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    overflow: auto;
}

.appModalTopBackdrop {
    @extend .appModalBackdrop;
    background-color: rgba(0, 0, 0, 0.4);
}

/* Modal Content/ Dialog Box. This is the outter frame of the dialog itself */

.appEmbedContent {
    background-color: $modal-content-bg;
    border: 2px solid gray;
    border-radius: $border-radius;
    width: 100%;
    margin-bottom: 10px;
    margin-top: 12px;
}

.appModalContentAreaEmbed {
    padding: 0px 12px 12px 12px;
    border-bottom-left-radius: $border-radius;
    border-bottom-right-radius: $border-radius;
}

.appModalContentAreaPopup {
    padding: 12px;
    border-bottom-left-radius: $border-radius;
    border-bottom-right-radius: $border-radius;
}

.appModalCont {
    position: absolute;
    background-color: $modal-content-bg;
    margin: $smallGap auto;
    max-width: 800px;
}

.dlgContentBorderTopmost {
    border-left: $dlgBorderWidth solid $dlgBorderColor;
    border-right: $dlgBorderWidth solid $dlgBorderColor;
    border-bottom: $dlgBorderWidth solid $dlgBorderColor;
}

.dlgContentBorderNormal {
    border-left: 2px solid gray;
    border-right: 2px solid gray;
    border-bottom: 2px solid gray;
}

.dlgTitleContent {
    padding: 6px 6px 4px 12px;
    width: 100%;
}

.line {
    width: 100%;
    border-bottom: 2px solid gray;
}

.appModalContTinyWidth {
    @extend .appModalCont;
    max-width: 350px;
}

.appModalContNarrowWidth {
    @extend .appModalCont;
    max-width: 500px;
}

.appModalContMediumWidth {
    @extend .appModalCont;
    max-width: 650px;
}

.scrollingPropsTable {
    width: 100%;
    overflow-x: auto;
    margin-left: $smallGap;
    margin-bottom: $smallGap;
}

/* I was getting a crazy render flicker where the browser was apparently toggling scrollbar off and on 10 times per second
it looked like and this wild ass guess at using 95% instead of 100% here as a fix solved the problem. 
Will come back later and study this more. todo-3 */
.videoContainer {
    width: 98%;
}

.videoPlayerElement {
    display: block;
    width: 75%;
    border: 2px solid gray;
    margin: 0 auto;
}

.appModalContFullscreen {
    background-color: $modal-content-bg;
    padding: $smallGap;
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    overflow: auto;
}

/* Max-width of 18em allows most of the page to the right to be clicked on to dismiss the menu */
.appModalMainMenu {
    border: 2px solid $modal-content-border-color;
    background-color: $modal-content-bg;
    width: 80%;
    max-width: 80%;
}

/* Modal Content/ Dialog Box */

.appModalMenu {
    border: 2px solid $modal-content-border-color;
    left: 0;
    top: 0;
    padding: 0;
    width: 20%;
    margin-top: 60px;
    margin-left: $smallGap;
    margin-right: $smallGap;
    margin-bottom: $smallGap;
    max-width: 400px;
    min-width: 350px;
    background-color: $modal-content-bg;
}

.appModalNavPanel {
    border: 2px solid $modal-content-border-color;
    left: 0;
    top: 0;
    padding: 0;
    width: 60%;
    margin-top: 60px;
    margin-left: $smallGap;
    margin-right: $smallGap;
    margin-bottom: $smallGap;
    max-width: 500px;
    min-width: 350px;
    background-color: $modal-content-bg;
}

.mainContainer {
    padding: 0;
    overflow: hidden;
}

.mainContainerMobile {
    padding: 0;
    font-size: 1.2rem;
}

.rightNavPanel {
    padding-top: 15px;
    padding-left: $smallGap;
    height: 100%;
    overflow-y: scroll;
    padding-bottom: 40px;
}

.leftNavPanel {
    height: 100%;
    overflow-y: scroll;
    padding-top: 12px;
    padding-bottom: 20px;
}

.tabPanelHeader {
    background-color: $primary ;
}

.tabSubOptions {
    margin-left: 2rem;
    margin-top: .5rem;
    margin-bottom: .8rem;
}

.tabSubOptionsItem {
    cursor: pointer;
    margin-bottom: 6px;
}

.tabSubOptionsItemMobile {
    cursor: pointer;
    margin-bottom: 6px;
    padding: 12px;
}

.tabButtonsContainer {
    margin-bottom: 8px;
}

.rightNavPanelInner {
    min-width: 15rem;
    margin-left: 10px;
}

.rightNavPanelInnerMobile {
    min-width: 15rem;
}

.scrollY {
    overflow-y: auto;
    overflow-x: hidden;
}

.scrollBorder {
    border: 1px solid gray;
}

// Tip: It's best practice to have overflow:hidden, on all 
// parent divs that are the 'same size' or same screen rectangle
// to prevent any 'double scroll' bars showing up.
.appTabPane {
    width: 100%;
    height: 100%;
    overflow-y: scroll;
    overflow-x: hidden;
    padding-right: 15px;
    padding-bottom: 20px;
}

.appTabPaneMobile {
    @extend .appTabPane;
    padding: 0px !important;
}

// This padding is what makes room for the '+' buttons to the right of the rows during editing
.appTabPaneEditMode {
    padding-right: 50px;
}

.tabPanel {
    height: 100%;
    padding-left: 0;
    padding-right: 0;
}

.tabPanelMobile {
    height: 100%;
    padding-left: 0;
    padding-right: 0;
    padding-top: $mobileHeaderBarHeight;
}

.tabContent {
    margin: 0;
    padding: 0;
    height: 100%;

    // important to have 'hidden' to avoid a double scroll bar when this is NOT the thing we're scrolling
    overflow: hidden;
}

.ipfsCidText {
    cursor: pointer;
}

.ipfsText {
    margin: $smallGap;
    padding: 5px;
}

/* I experimented with limiting height of rows and allowing individual scrolling on nodes but
   i think usability and asthetics make this slightly awkward. You can simply uncomment these styles
   and look, any time, to remember what that looks like. The style is in place in the code
   */

.tallTextContent {
    max-height: 650px;
}

.cryptoKeyTextContent {
    max-height: 300px;
    border: 1px solid $gray-700;
    padding: 1rem;
}

.selectKeyTypeDropDown {
    margin-bottom: 12px;
    max-width: 20rem;
}

.centeredTitle {
    width: 500px;
    /* This margin trick causes horizontal centering */
    margin: 0 auto;
}

.listGroupMenuItem {
    background-color: transparent;
    padding: 5px 5px 4px 10px;
}

.listGroupTransparent {
    background-color: transparent;
    padding: 5px 5px 4px 10px;
}

.audioPlayer {
    width: 100%;
    padding: 0;
    margin-top: 0;
    margin-left: 0;
    margin-right: 0;
    margin-bottom: 10px;
}

.marginLeftIfNotFirst {
    margin-left: $smallGap;
}

.marginLeftIfNotFirst:first-child {
    margin-left: 0;
}

.marginLeft {
    margin-left: $smallGap;
}

.marginRight {
    margin-right: $smallGap;
}

.mediumMarginRight {
    margin-right: $mediumGap;
}

.imgBlock {
    margin-top: 12px;
    margin-right: 12px;
    margin-bottom: 12px;
    display: block;
    border: 1px solid $gray-700;
    border-radius: $border-radius;
}

// WARNING: This class is used for finding in the DOM also, and isn't just for styling.
// Without this class some images won't be clickable to enlarge
.enlargableImg {
    cursor: pointer;
}

.imgUpperLeft {
    margin-right: 24px;
    margin-bottom: $smallGap;
    margin-top: $smallGap;
    float: left !important;
    border: 1px solid $gray-700;
    border-radius: $border-radius;
    vertical-align: top;
}

.imgUpperRight {
    margin-left: 24px;
    margin-bottom: $smallGap;
    margin-top: $smallGap;
    float: right !important;
    border: 1px solid $gray-700;
    border-radius: $border-radius;
    vertical-align: top;
}

.imgUpperCenter {
    display: block;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: $smallGap;
    margin-top: $smallGap;
    border: 1px solid $gray-700;
    border-radius: $border-radius;
}

.microMarginTop {
    margin-top: $microGap;
}

.microMarginBottom {
    margin-bottom: $microGap;
}

.microMarginRight {
    margin-right: $microGap;
}

.marginTop {
    margin-top: $smallGap;
}

.mediumPaddingTop {
    padding-top: $mediumGap;
}

.smallMarginTop {
    margin-top: $tinyGap;
}

.smallMarginBottom {
    margin-bottom: $tinyGap;
}

.smallMarginRight {
    margin-right: $smallGap;
}

.bigMarginBottom {
    margin-bottom: $bigGap;
}

.bigMarginRight {
    margin-right: $bigGap;
}

.bigPaddingRight {
    padding-right: $bigGap;
}

.bigMarginTop {
    margin-top: $bigGap;
}

.bigMarginLeft {
    margin-left: $bigGap;
}

.bigMargin {
    margin: $bigGap;
}

.linkDisplay {
    display: inline-block;
    margin-bottom: $smallGap;
    margin-left: 20px;
    padding: $tinyGap;
    border: 1px solid gray;
    cursor: pointer;
}

.delAttachmentButton {
    margin-top: $tinyGap;
    margin-right: $tinyGap;
}

.delAttCheckbox {
    margin-right: 0px !important;
}

.attachmentLinkGroup {
    margin-left: 20px;
}

.microMarginTop {
    margin-top: $microGap;
}

.marginBottom {
    margin-bottom: $smallGap;
}

.marginBottomIfNotLast {
    &:not(:last-child) {
        margin-bottom: $smallGap;
    }
}

.selectOption {
    font-size: 120%;
}

.marginAll {
    margin: $smallGap;
}

.microMarginAll {
    margin: $microGap;
}

.tinyMarginAll {
    margin: $tinyGap;
}

.tinyMarginTop {
    margin-top: $tinyGap;
}

.tinyMarginBottom {
    margin-bottom: $tinyGap;
}

.small-padding {
    margin-top: 7px;
    padding: 4px;
}

// see if flexRowLayout can be used here (CSS class and or TS class)
.horizontalLayout {
    // flex will layout things all on the same horizontal row
    display: flex;
}

.quickEditIcon {
    cursor: pointer;
    color: $nodeBorderBottomColor;
    margin-left: $smallGap;
}

/* 
&#x25B2; ▲
&#x25B6; ▶
&#x25BC; ▼
&#x25C0; ◀
*/
.iconUp:after {
    content: "\25B2";
    padding-left: 5px;
}

.iconDown:after {
    content: "\25BC";
    padding-left: 5px;
}

.textareaMin4 {
    font-family: inherit;
    min-height: 4rem;
}

.fontInherit {
    font-family: inherit;
}

.mkDownCodespan {
    color: var(--bs-green);
    word-wrap: break-word;
    cursor: pointer;
    font-size: 110%;

    // I saw these in browser elements view but not sure if we need them.
    // direction: ltr /* rtl:ignore */;
    // unicode-bidi: bidi-override;
}

.preTextarea {
    //WARNING: Setting a font family here (other than inherit) causes noticeable flicker whenever react re-renders (during focus and blur eventing), 
    //but the solution appeared to be to set the font on the PARENT div of an input control (to monospace), and then use 'inherit' here as the actual font-family.
    font-family: inherit;
    background-color: #1b2631 !important;
    border-radius: 0px !important;
    border: 1px solid gray;
}

.preTextField {
    //WARNING: Setting a font family here (other than inherit) causes noticeable flicker whenever react re-renders (during focus and blur eventing), 
    //but the solution appeared to be to set the font on the PARENT div of an input control (to monospace), and then use 'inherit' here as the actual font-family.
    padding: 5px 5px 5px 10px;
    font-family: inherit;
    border-radius: 0px !important;
    border: 1px solid gray;
}

.formSelect {
    border: 1px solid gray !important;
    padding: 5px 5px 5px 10px;
}

.tagIndent {
    margin-left: 2rem;
}

// todo-1: ended up with two different version of this class. only difference is lowercase of 'F'. fix it.
.textfield {
    font-family: "monospace";
}

.textField {
    font-family: "monospace";
}

/* We use a tiny gap for password text fields so that the 'Show Password" button can be very close below */
.passwordTextField {
    margin-bottom: $tinyGap;
}

.rowIcon {
    margin-left: 10px;
    margin-right: 6px;
    vertical-align: middle;
    cursor: pointer;
}

.typeSearchField {
    margin-bottom: $smallGap;
}

.rowTypeIcon {
    vertical-align: middle;
    border: 1px solid gray;
    padding: 6px;
    cursor: pointer;
}

.histTypeIcon {
    @extend .rowTypeIcon;
    margin-right: $tinyGap;
    vertical-align: bottom; // important so long text looks consistent in row spacing
}

.rowTypeName {
    vertical-align: middle;
    margin-left: 6px;
}

.passwordEyeIcon {
    cursor: pointer;
    margin-left: 10px;
}

.mkCont {
    padding-top: .5rem;
    padding-left: 1.2rem;
    padding-bottom: 1.2rem;
    padding-right: 1rem;
}

.mkCont h1 {
    font-size: 2.8rem;
}

.mkCont h2 {
    font-size: 2.6rem;
}

.mkCont h3 {
    font-size: 2.4rem;
}

.mkCont h4 {
    font-size: 2.1rem;
}

.mkCont h5 {
    font-size: 1.8rem;
}

.mkCont h6 {
    font-size: 1.5rem;
}

// without this any multi-paragraph text that our markdown renders always has too much spacing at the bottom. We already specify the
// amount of spacing we want in the mkCont style itself so we stop this from messing that up with this 'last-child' style
.mkCont p:last-child {
    margin-bottom: 0;
}

// Note: Don't try border-radius here, becasue that's ugly with horizontal scrollbar (corner sticks out over round edge)
.mkCont kbd,
.mkCont pre,
.mkCont samp {
    width: 100%;
    border: 1px solid olivedrab;
    background-color: $baseBgColor;
    padding: 0;
}

.rowImageContainer {
    display: flex;
    flex-wrap: wrap;
    margin-left: $smallGap;
    // margin-top: $tinyGap;
}

.fullScreenImg {
    cursor: pointer;
    margin: 12px;
    border: 3px solid $gray-700;
}

.imgInEditor {
    cursor: pointer;
    border: 1px solid gray;
    vertical-align: top;
    width: 75px;
}

.systemFileActionLink {
    cursor: pointer;
    margin-right: 16px;
    border-bottom: 1px dotted gray;
}

.systemFile {
    font-family: Courier New, Courier, Roboto, Tahoma, Verdana, Arial;
    cursor: pointer;
    padding-bottom: 5px;
}

.mainTabPanel {
    //border: 1px solid black;
    //background-color: $mainContentBackground;
    //setting a max-width here ruins the centering horizontally on the page, my goal was
    //to narrow the main tab content in center of page
    //WARNING: I think the bootstrap 'main' entity is what is setting the width here and it didn't work to chagne it here.
    // max-width: 750px;

    //I'd prefer to have NO margin, but the top margin is getting forced so I'll add a bottom margin for consistency for now
    margin-bottom: $smallGap;
    width: 100%;
}

.searchResultsPanel {
}

.timelinePanel {
}

.parentNodeContentStyle {
    padding-right: 8px;
    padding-top: 8px;
    margin-bottom: 8px;
    margin-top: 8px;
}

.vertLayoutRow {
    margin-bottom: $smallGap;
}

.validationError {
    color: #E74C3C;
    margin-bottom: 0;
}

.validationErrorBorder {
    border: 2px solid #E74C3C;
}

.editorTagsSection {
    margin-top: $smallGap;
}

.tagsFlexContainer {
    display: flex;
    flex-wrap: wrap;
}

.txtFieldLabelShort {
    margin-right: .25rem;
}

.txtFieldLabel {
    margin-right: .25rem;
    margin-top: 1rem;
}

.dialogTitle {
    font-size: 30px;
    margin-bottom: 20px;
}

.dialogSubTitle {
    font-size: 20px;
    margin-bottom: 20px;
}

.headerInfoDivExpanded {
    display: block;
    width: 100%;
}

.headerInfoDivCollapsed {
    display: inline-block;
}

.headerInfoButton {
    background-color: transparent;
    margin-right: $smallGap;
    margin-bottom: $smallGap;
}

.typeListIcon {
    margin-right: 12px;
    margin-top: 4px;
    vertical-align: "middle";
}

/* This positioning puts the plus buttion right outside the row to the right between rows
   so it's intuitive where the insert goes 
   
   NOTE: We could've also used a 'translatle()' css function to do this.
   */
.plusButtonFloatRight {
    position: absolute;
    top: -1.3rem;
    right: -3rem;
}

@keyframes fadeToHidden {
    // from {
    //     opacity: 1;
    // }

    to {
        opacity: 0;
    }
}

.compHidden {
    visibility: hidden;

    // animating the hiding part doesn't work well, because the effect gets interrupted by other parts of 
    // our animation flow, so we have to set to hidden instantly without animation.
    // animation-name: fadeToHidden;
    // animation-duration: .2s;
    // opacity: 0;

    margin-bottom: 20px;
}

/* Note: visibility is not allowed to be animated. This is a rule of CSS engines, not our own limitation. Also we don't set the 
'from' value becasue if it's already visibible 'opacity=1' we don't want to cause a screen flicker by setting invisible first for no reason.
*/
@keyframes fadeToVisible {
    from {
        opacity: hidden;
    }
    to {
        visibility: visible;
    }
}

.compVisible {
    visibility: visible;

    // this was an experiment, an may not even have been desirable
    // so for now we just set to visible instantly which is better
    // performance anyway, and may not be any less eye-strain
    // than I had thought this animation might solve.
    // animation-name: fadeToVisible;
    // animation-duration: 1s; <-------this didn't work. Comes back to visible instantly (no amination).
    margin-bottom: 20px;
}

.noMargin {
    margin: 0;
}

.noPaddingRight {
    padding-right: 0px !important;
}

.systemNodeContent {
    border: 1px solid gray;
    padding: $tinyGap;
    background-color: $secondary;
    margin: $tinyGap $smallGap $smallGap $smallGap;
    width: 97%;
}

// todo-1: once I'm certain about it I can remove these
.contentNarrow {
}

.contentMedium {
}

.contentWide {
}

.mousePointer {
    cursor: pointer;
}

.propsList {

}

.propsListItemCheckBox {
    vertical-align: middle;
    margin-left: $microGap;
    margin-right: 0 !important;
}

.propertyTable {

}

.propTableRow {
    width: 100%;
}

.propTableNameCol {
    width: 25%;
    background-color: darkolivegreen;
}

.propTableValCol {
    width: 70%;
}

.folderIcon {
    color: darkkhaki;
}

.fileIcon {
    color: darkgreen;
}

.files-table {
    width: 100%;
    margin-top: $smallGap;
}

.filesTableRow {
    width: 100%;
}

.filesTableTypeCol {
    width: 5%;
}

.filesTableSizeCol {
    width: 15%;
}

.filesTableDelCol {
    width: 5%;
}

.filesTableNameCol {
    cursor: pointer;
    width: 75%;
}

.verticalSpace {
    height: 16px;
    min-height: 16px;
}

.resultsNode {
    // why relative here ? todo-1
    position: relative;
    cursor: pointer;
}

.widthSizerPanel {
    margin-top: 8px;
    display: inline-block;
    background: $body-bg;
}

.showParentsIcon {
    cursor: pointer;
    color: gray;
}

.main {
    background-color: #eee;
}

.smallHeading {
    font-size: 1.3rem;
}

.timeRemainingEditField {
    margin-left: 5px;
}

.clearBoth {
    clear: both;
}

.border-bottom {
    border-bottom: 1px solid #e5e5e5;
}

.testHighlight {
    background-color: green;
}

.threadNodeDivider {
    width: 100%;
}

.threadFeedItemBase {
    margin-top: 8px;
    padding-top: 10px;
    border-radius: $border-radius;
}

.threadFeedItem {
    @extend .threadFeedItemBase;
    border: 1px solid $nodeBorderBottomColor;
}

.threadFeedItemTarget {
    @extend .threadFeedItemBase;
    border: 4px solid $nodeBorderBottomColor;
}

.threadFeedItemHighlight {
    @extend .threadFeedItemBase;
    border: 1px solid olivedrab;
}

.threadFeedItemHighlightTarget {
    @extend .threadFeedItemBase;
    border: 4px solid olivedrab;
}

.threadFeedSubItem {
    padding-top: 10px;

    &:not(:last-child) {
        border-bottom: 1px solid $nodeBorderBottomColor;
    }

    &:last-child {
        margin-bottom: 16px;
    }

    border-left: 1px solid $nodeBorderBottomColor;
    margin-left: 4rem;
}

.userFeedItem {
    padding-top: 10px;
    border-top: 1px solid $nodeBorderBottomColor;
    padding-bottom: $tinyGap;
}

.userFeedItemHighlight {
    padding-top: 10px;
    border: 1px solid olivedrab;
    padding-bottom: $tinyGap;
}

.userFeedParent {
    border: 2px solid $nodeBorderBottomColor;
}

.iconToggle {
}

.iconToggleOn {
    @extend .iconToggle;
    border: 3px solid var(--bs-green);
    padding: 1px;
}

.alignBottom {
    vertical-align: bottom !important;
}

.iconToggleOff {
    @extend .iconToggle;
    border: 3px solid transparent;
}

.searchDlgOrderBy {
    width: 12rem;
    margin-left: $bigGap;
}

.searchDlgSearchRoot {
    width: 12rem;
}

.layoutSelection {
    max-width: 14rem;
    margin-right: 1rem;
}

.imagesSelection {
    max-width: 7rem;
    margin-right: $smallGap;
}

.selectLabel {
    margin-right: 6px;
}

.widthDropDown {
    display: inline-block;
    margin-right: $smallGap;
    margin-left: $smallGap;
    width: 6rem;
}

.positionDropDown {
    display: inline-block;
    margin-right: $smallGap;
    width: 7rem;
}

.friendSearchField {
    width: 50%;
}

.friendSearchButtonDiv {
    padding-left: $tinyGap;
    width: 10%;
}

.friendsTagPickerOnEditor {
    width: 40%;
    padding-left: $bigGap;
}

.friendsTagPickerOnView {
    width: 15em;
    padding-right: $smallGap;
    display: inline-block;
}

.binaryEditorSection {
    border: 1px solid gray;
    margin-bottom: $smallGap;
    margin-top: $tinyGap;
    padding: $smallGap;
    background-color: #17202A;
}

.binaryEditorItem {
    padding-bottom: $microGap;
}

.binaryEditorItem {
    &:not(:last-child) {
        border-bottom: 1px solid $gray-700;
        margin-bottom: $tinyGap;
    }
}

.captchaImage {
    margin-left: 1px;
    margin-right: $smallGap;
    border: 2px solid $gray-700;
}

.heading5 {
    font-size: 1.2rem;
    font-weight: 500;
    line-height: 1.2;
}

.inlineBlock {
    display: inline-block;
}

.friendListText {
    display: inline-block;
    font-weight: 500;
    padding-left: 8px;
    padding-top: 6px;
    vertical-align: top;
    cursor: pointer;
}

.friendName {
    font-size: 1rem;
    font-weight: bold;
}

.sharingDisplayName {
    display: inline-block;
    padding: $smallGap;
    cursor: pointer;
}

.friendListImgDivCont {
    display: inline-block;
}

.propNameInList {
    display: inline-block;
    margin: $tinyGap;
}

.propRangesInList {
    display: inline-block;
    margin: $tinyGap;
}

.friendListImgDiv {
    width: 70px;
    max-width: 70px;
    min-height: 70px; // min hight needed to make list boxes look good.
    cursor: pointer;
    margin: $tinyGap 2px 2px $tinyGap;
    border: 1px solid gray;
}

// centers the child that's inside this div (both vertically and horizontall centering)
.centerChild {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
}

.friendListImage {
    width: 100%;
}

.mobileRHSPanel {
    font-size: 140%;
}

.editorIcon {
    margin-left: $smallGap;
    cursor: pointer;
}

.largeFont {
    font-size: 140%;
}

.ipfsPinnedCheckbox {
    margin-left: 24px;
}

.durationTypeInput {
    max-width: 5rem;
    margin-left: $smallGap;
}

//We use the default player except we have our own big play and pause buttons.

audio::-webkit-media-controls-mute-button {
    display: none !important;
}

audio::-webkit-media-controls-play-button {
    display: none !important;
}

// NOTE: The way to center an element inside another element is user "text-align: center" on the parent 
// element and then "display: inline-block" on the element to be centered in the parent.
.playerButtonsContainer {
    text-align: center;
    margin-top: 20px;
}

.playerButton {
    cursor: pointer;
    display: inline-block;
    padding: 12px;
    border: 6px solid lightGray;
}

// WARNING: Don't put ANY margin at top, becasue that makes the stickyness not perfect.
.headingBar {
    padding-top: 8px;
    margin-bottom: 8px;
    border-bottom: $highlightBorderSize solid $nodeBorderBottomColor;
    background-color: $body-bg;
    position: sticky;
    top: 0;
    z-index: 100;
    min-height: 4em;
}

.headingBarMobile {
    padding-top: 8px;
    margin-bottom: 8px;
    border-bottom: $highlightBorderSize solid $nodeBorderBottomColor;
    background-color: $body-bg;
    min-height: 4em;
}

.tabTitle {
    display: inline-block;
    font-size: 1.5rem;
    font-weight: bold;
    vertical-align: middle;
    color: var(--bs-green);
}

.monospace {
    font-family: Courier New, Courier, Lucida Sans Typewriter, Lucida Typewriter, monospace;
}

.rowHeaderSharingNames {
    margin-right: $smallGap;
}

.editDlgSharingNames {
    padding: 3px 4px 3px 4px;
    cursor: pointer;
}

.dlgIcon {
    margin-right: 8px;
    vertical-align: "middle";
}

.iconMarginLeft {
    margin-left: 12px;
    vertical-align: "middle";
}

.tableRow {
    display: table-row;
}

.profileInfoButton {
    display: inline-block;
    margin-top: $smallGap;
    font-weight: bold;
    margin-left: 15px;
    padding: 8px;
    border: 2px solid $nodeBorderBottomColor;
    border-radius: 100px;
    cursor: pointer;
}

.followingText {
    @extend .profileInfoButton;
    background-color: green;
}

.blockingText {
    @extend .profileInfoButton;
    background-color: orangered;
}

.followCount {
    @extend .profileInfoButton;
}

.displayTable {
    display: table;
    border-spacing: 10px;
}

.flexRowLayout {
    display: flex;
    flex-wrap: wrap;

    // WARNING: without this items can stretch vertically and this warps images 
    align-items: flex-start;
}

.flexRowAlignBottom {
    align-items: end;
}

.horizontalLayoutComp {
    display: table;
    border-spacing: 10px;
    margin-top: $smallGap;
    margin-bottom: $smallGap;
}

.horizontalLayoutCompCompact {
    display: table;
    border-spacing: 10px;
}

.horizontalLayoutCompBorderCollapse {
    @extend .horizontalLayoutComp;
    border-collapse: collapse;
}

.displayTableNoSpacing {
    display: table;
}

.displayRow {
    display: table-row;
}

.displayCell {
    display: table-cell;
    vertical-align: top;
}

.clickable {
    cursor: pointer;
}

.userInfo {
    cursor: pointer;
    width: 100%;
    margin-top: $smallGap;
    margin-bottom: $smallGap;
}

.stickyNote {
    margin-top: 6px;
    color: darkkhaki;
}

.warningIcon {
    color: darkkhaki;
}

.likedByMeIcon {
    color: yellow;
    border: 2px solid yellow;
    padding: 6px;
    border-radius: 8px;
}

.apObjIconContainer {
    margin-left: $smallGap;
}

.apObjIcon {
    display: inline;
    vertical-align: top;
    max-width: 32%;
    min-width: 200px;
    margin-left: $smallGap;
    margin-bottom: $smallGap;
}

.apObjLinksContainer {
    margin-bottom: $smallGap;
    margin-left: $smallGap;
}

.apUrlLink {
    margin-bottom: $microGap;
}

.rhsLink {
    margin-top: 25px;
    margin-right: 55px;
    cursor: pointer;
}

.floatRightHeaderDiv {
    margin-left: 10px;
    margin-top: 2px;
}

.welcomeText {
    max-width: 30rem;
    display: inline-block;
}

.supportText {
    font-size: 80%;
    font-style: italic;
}

.historyPanelTitle {
    font-weight: bold;
    margin-bottom: $smallGap;
    display: inline-block;
}

.nodeHistoryPanel {
    margin-left: 16px;
    padding-top: 4px;
    border-top: 1px dotted gray;
}

.lockFont {
    font-size: 90%;
}

.dragSource {
    background: repeating-linear-gradient(-45deg,
            orange,
            orange 2px,
            transparent 2px,
            transparent 14px);
}

.dragTarget {
    background: repeating-linear-gradient(-45deg,
            green,
            green 2px,
            transparent 2px,
            transparent 14px);
}

.nodeHistoryItem {
    cursor: pointer;
    margin: 0 $smallGap $microGap $smallGap;
}

.ipsmFeedItem {
    font-family: 'Courier New', Courier, monospace;
    border-bottom: 1px solid gray;
}

.dateField {
    font-family: "monospace";
}

.timeField {
    font-family: "monospace";
}

.dragTargetDlgSection {
    margin-top: $smallGap;
    border: 1px solid gray;
    padding: $smallGap;
}

.tagsPrompt {
    width: 4em;
    margin-right: $smallGap;
    text-align: right;
}

.linksPrompt {
    width: 4em;
    margin-right: $smallGap;
    text-align: right;
}

.linkLabel {
    font-size: 1.1rem;
    font-weight: bold;
    margin-left: $smallGap;
    margin-bottom: $smallGap;
    background-color: cadetblue;
    color: black;
    padding: $microGap;
    border-radius: $border-radius;
}

.nodeLink {
    display: inline-block;
    background-color: $primary;
    border: 1px solid gray;
    padding: 0 6px 0 6px;
    margin-right: 8px;
    margin-bottom: 8px;
    cursor: pointer;
    white-space: nowrap;
}

.linksPanel {
    margin-left: $smallGap;
}

.linksPanelInEditor {
    display: flex;
    flex-wrap: wrap;
}

.dimImg {
    filter: brightness(70%);
}

.highlightText {
    background-color: blue;
    color: yellow;
    padding-top: 4px;
    padding-bottom: 4px;
}

.lastModifiedTime {
    margin-right: $tinyGap;
}

.boost-header {
    cursor: pointer;
    margin-left: $smallGap;
}

.contentWidthSelection {
    margin-bottom: 12px;
    max-width: 20rem;
}

.accountSettingsCol {
    width: 50%;
}

.accountSettingsPanel {
    margin-left: $smallGap;
    width: 100%;
}

.accountSettingsSection {
    width: 100%;
}

.settingsLink {
    cursor: pointer;
    font-size: 120%;
    margin-left: $bigGap;
    margin-bottom: $smallGap;
}

.settingsSectionTitle {
    margin-top: 24px;
    margin-bottom: 8px;
    padding: 6px 6px 6px 12px;
    border: 1px solid $nodeBorderBottomColor;
    text-align: center;
    margin-right: $bigGap;
}

.flexPropsEditPanel {
    display: flex;
    flex-wrap: wrap;
}

.flexPropsDisplayPanel {
    display: flex;
    flex-wrap: wrap;
}

.fieldDisplayPanel {
    margin-left: 16px;
    margin-bottom: $smallGap;
    border-top: 1px dotted $nodeBorderBottomColor;
    border-right: 1px dotted $nodeBorderBottomColor;
}

.fieldDisplayLabel {
    margin-left: $smallGap;
    margin-top: $tinyGap;
}

.fieldDisplayVal {
    font-family: Courier New, Courier, Lucida Sans Typewriter, Lucida Typewriter, monospace;
    font-size: 115%;
    margin-left: $smallGap;
    color: green;
}

.fieldDisplayCell {
    border-left: 4px solid $nodeBorderBottomColor;
    border-bottom: 1px dotted $nodeBorderBottomColor;
}

.contentEditor {
    width: 100%;
}

.editTypesPanelHeader {
    margin: $tinyGap 0 0 $smallGap;
}
